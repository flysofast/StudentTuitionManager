//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TuitionManagement.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class FeeManagementEntities : DbContext
    {
        public FeeManagementEntities()
            : base("name=FeeManagementEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Class> Class { get; set; }
        public DbSet<FeeAccount> FeeAccount { get; set; }
        public DbSet<FeeLevel> FeeLevel { get; set; }
        public DbSet<Function> Function { get; set; }
        public DbSet<Invoice> Invoice { get; set; }
        public DbSet<Object> Object { get; set; }
        public DbSet<Rate> Rate { get; set; }
        public DbSet<Receipt> Receipt { get; set; }
        public DbSet<Role> Role { get; set; }
        public DbSet<RoleFunction> RoleFunction { get; set; }
        public DbSet<Student> Student { get; set; }
        public DbSet<SubInvoice> SubInvoice { get; set; }
        public DbSet<sysdiagrams> sysdiagrams { get; set; }
        public DbSet<vwActivation> vwActivation { get; set; }
        public DbSet<vwInvoice> vwInvoice { get; set; }
        public DbSet<vwInvoiceWithoutClass> vwInvoiceWithoutClass { get; set; }
        public DbSet<vwReceipt> vwReceipt { get; set; }
    
        public virtual int createViewActivation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("createViewActivation");
        }
    
        public virtual int createViewReceipt()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("createViewReceipt");
        }
    
        public virtual int doStatistics()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("doStatistics");
        }
    
        public virtual int genSubInvoice(Nullable<int> invoiceId, Nullable<System.DateTime> activatedDate, Nullable<int> group)
        {
            var invoiceIdParameter = invoiceId.HasValue ?
                new ObjectParameter("invoiceId", invoiceId) :
                new ObjectParameter("invoiceId", typeof(int));
    
            var activatedDateParameter = activatedDate.HasValue ?
                new ObjectParameter("activatedDate", activatedDate) :
                new ObjectParameter("activatedDate", typeof(System.DateTime));
    
            var groupParameter = group.HasValue ?
                new ObjectParameter("group", group) :
                new ObjectParameter("group", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("genSubInvoice", invoiceIdParameter, activatedDateParameter, groupParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int updateRuleFeeDate(Nullable<int> invoiceId, Nullable<System.DateTime> activatedDate, Nullable<System.DateTime> currentDate)
        {
            var invoiceIdParameter = invoiceId.HasValue ?
                new ObjectParameter("invoiceId", invoiceId) :
                new ObjectParameter("invoiceId", typeof(int));
    
            var activatedDateParameter = activatedDate.HasValue ?
                new ObjectParameter("activatedDate", activatedDate) :
                new ObjectParameter("activatedDate", typeof(System.DateTime));
    
            var currentDateParameter = currentDate.HasValue ?
                new ObjectParameter("currentDate", currentDate) :
                new ObjectParameter("currentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateRuleFeeDate", invoiceIdParameter, activatedDateParameter, currentDateParameter);
        }
    }
}
